name: android-build-test

on:
  workflow_call:
    inputs:
      build-environment:
        required: true
        type: string
      docker-image-name:
        required: true
        type: string

env:
  IN_CI: 1 # TODO delete in favor of GITHUB_ACTIONS
  IS_GHA: 1 # TODO delete in favor of GITHUB_ACTIONS

jobs:
  build-and-test:
    runs-on: [self-hosted, linux.2xlarge]
    steps:
      - name: Clean workspace
        shell: bash
        run: |
          echo "${GITHUB_WORKSPACE}"
          sudo rm -rf "${GITHUB_WORKSPACE}"
          mkdir "${GITHUB_WORKSPACE}"

      - name: Checkout PyTorch
        uses: zhouzhuojie/checkout@05b13c9a0d21f08f6d5e64a1d5042246d13619d9
        with:
          ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}
          # deep clone, to allow use of git merge-base
          fetch-depth: 0
          submodules: recursive

      - name: Setup Linux
        uses: ./.github/actions/setup-linux
        with:
          github-secret: ${{ secrets.GITHUB_TOKEN }}

      - name: Calculate docker image
        id: calculate-docker-image
        uses: ./.github/actions/calculate-docker-image
        with:
          docker-image-name: ${{ inputs.docker-image-name }}
          xla: ${{ contains(inputs.build-environment, 'xla') }}

      - name: Pull Docker image
        run: |
          retry () { "$@"  || (sleep 1 && "$@") || (sleep 2 && "$@") }
          retry docker pull ${{ steps.calculate-docker-image.outputs.docker-image }}

      - name: Output disk space left
        run: |
          sudo df -H

      - name: Preserve github env variables for use in docker
        run: |
          env | grep '^GITHUB' > "/tmp/github_env_${GITHUB_RUN_ID}"

      - name: Build
        env:
          BUILD_ENVIRONMENT: ${{ inputs.build-environment }}
          JOB_BASE_NAME: ${{ inputs.build-environment }}-build-and-test
          CUSTOM_TEST_ARTIFACT_BUILD_DIR: build/custom_test_artifacts
          TORCH_CUDA_ARCH_LIST: 5.2
          SCCACHE_BUCKET: ossci-compiler-cache-circleci-v2
          PR_LABELS: ${{ toJson(github.event.pull_request.labels.*.name) }}
          DOCKER_IMAGE: ${{ steps.calculate-docker-image.outputs.docker-image }}
        run: |
          set -e
          # Unlike other gradle jobs, it's not worth building libtorch in a separate CI job and share via docker, because:
          # 1) Not shareable: it's custom selective build, which is different from default libtorch mobile build;
          # 2) Not parallelizable by architecture: it only builds libtorch for one architecture;

          echo "DOCKER_IMAGE: ${DOCKER_IMAGE}"
          time docker pull "${DOCKER_IMAGE}" >/dev/null

          export BUILD_LITE_INTERPRETER
          BUILD_LITE_INTERPRETER="1"
          if [[ "${BUILD_ENVIRONMENT}" == *"full-jit" ]]; then
            BUILD_LITE_INTERPRETER="0"
          fi

          git submodule sync && git submodule update -q --init --recursive --depth 1 --jobs 0
          # shellcheck disable=SC2016
          export id
          id=$(docker run -e BUILD_ENVIRONMENT \
            -e JOB_BASE_NAME \
            -e MAX_JOBS="$(nproc --ignore=2)" \
            -e SCCACHE_BUCKET \
            -e CUSTOM_TEST_ARTIFACT_BUILD_DIR \
            -e PR_LABELS \
            -e SKIP_SCCACHE_INITIALIZATION=1 \
            -e TORCH_CUDA_ARCH_LIST \
            -e BUILD_LITE_INTERPRETER \
            --env-file="/tmp/github_env_${GITHUB_RUN_ID}" \
            --security-opt seccomp=unconfined \
            --cap-add=SYS_PTRACE \
            --tty \
            --detach \
            --user jenkins \
            -v "$(pwd):/var/lib/jenkins/workspace" \
            --cap-add=SYS_PTRACE \
            --security-opt seccomp=unconfined \
            --cap-add=SYS_PTRACE \
            --security-opt seccomp=unconfined \
            -t -d -w /var/lib/jenkins "${DOCKER_IMAGE}")

          # shellcheck disable=SC2016
          export COMMAND
          # shellcheck disable=SC2016
          COMMAND='((echo "export GRADLE_OFFLINE=1" && echo "export BUILD_LITE_INTERPRETER=${BUILD_LITE_INTERPRETER}" && echo "sudo chown -R jenkins workspace && cd workspace && ./.circleci/scripts/build_android_gradle.sh") | docker exec -u jenkins -i "$id" bash) 2>&1'
          echo "${COMMAND}" > ./command.sh && bash ./command.sh
          # Skip docker push as this job is purely for size analysis purpose.
          # Result binaries are already in `/home/circleci/project/` as it's mounted instead of copied.

      - name: Parse ref
        id: parse-ref
        run: .github/scripts/parse_ref.py

      - name: Display and upload binary build size statistics (Click Me)
        # temporary hack: set CIRCLE_* vars, until we update
        # tools/stats/print_test_stats.py to natively support GitHub Actions
        env:
          AWS_DEFAULT_REGION: us-east-1
          SCRIBE_GRAPHQL_ACCESS_TOKEN: ${{ secrets.SCRIBE_GRAPHQL_ACCESS_TOKEN }}
          BRANCH: ${{ steps.parse-ref.outputs.branch }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          SHA1: ${{ github.event.pull_request.head.sha || github.sha }}
          TAG: ${{ steps.parse-ref.outputs.tag }}
          WORKFLOW_ID: ${{ github.run_id }}
          ARTIFACTS: ""
          ANDROID_BUILD_TYPE: custom-build-single
        run: |
          # The artifact file is created inside docker container, which contains the result binaries.
          # Now unpackage it into the project folder. The subsequent script will scan project folder
          # to locate result binaries and report their sizes.
          # If artifact file is not provided it assumes that the project folder has been mounted in
          # the docker during build and already contains the result binaries, so this step can be skipped.
          if [ -n "${ARTIFACTS}" ]; then
            tar xf "${ARTIFACTS}" -C "${GITHUB_WORKSPACE}"
            cd "${GITHUB_WORKSPACE}"
          fi
          COMMIT_TIME=$(git log --max-count=1 --format=%ct || echo 0)
          export COMMIT_TIME
          pip3 install requests==2.26 boto3==1.16.34
          python3 -m tools.stats.upload_binary_size_to_scuba "android" || exit 0

      - name: Chown workspace
        if: always()
        env:
          # TODO duplicated
          ALPINE_IMAGE: "308535385114.dkr.ecr.us-east-1.amazonaws.com/tool/alpine"
        run: |
          # Ensure the working directory gets chowned back to the current user
          docker run --rm -v "$(pwd)":/v -w /v "${ALPINE_IMAGE}" chown -R "$(id -u):$(id -g)" .

      - name: Hold runner for 2 hours or until ssh sessions have drained
        # TODO working-directory: !{{ pytorch_directory }}
        # Always hold for active ssh sessions
        if: always()
        run: .github/scripts/wait_for_ssh_to_drain.sh

      - name: Kill containers, clean up images
        if: always()
        run: |
          # ignore expansion of "docker ps -q" since it could be empty
          # shellcheck disable=SC2046
          docker stop $(docker ps -q) || true
          # Prune all of the docker images
          docker system prune -af
