name: linux-test

on:
  workflow_call:
    inputs:
      build-environment:
        required: true
        type: string
      test-matrix:
        required: true
        type: string
      docker-image:
        required: true
        type: string

env:
  IN_CI: 1 # TODO delete in favor of GITHUB_ACTIONS
  IS_GHA: 1 # TODO delete in favor of GITHUB_ACTIONS

jobs:
  test:
    strategy:
      matrix: ${{ fromJSON(inputs.test-matrix) }}
      fail-fast: false
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Clean workspace
        shell: bash
        run: |
          echo "${GITHUB_WORKSPACE}"
          sudo rm -rf "${GITHUB_WORKSPACE}"
          mkdir "${GITHUB_WORKSPACE}"

      - name: Checkout PyTorch
        uses: zhouzhuojie/checkout@05b13c9a0d21f08f6d5e64a1d5042246d13619d9
        with:
          ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}
          # deep clone, to allow use of git merge-base
          fetch-depth: 0
          submodules: recursive

      - name: Setup Linux
        uses: ./.github/actions/setup-linux
        with:
          github-secret: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull Docker image
        run: |
          retry () { "$@"  || (sleep 1 && "$@") || (sleep 2 && "$@") }
          retry docker pull ${{ inputs.docker-image }}

      - name: Install nvidia driver, nvidia-docker runtime, set GPU_FLAG
        uses: nick-fields/retry@71062288b76e2b6214ebde0e673ce0de1755740a
        if: contains(inputs.build-environment, 'cuda') && !contains(matrix.config, 'nogpu')
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: >-
            set -ex
            bash .github/scripts/install_nvidia_utils_linux.sh
            echo "GPU_FLAG=--gpus all" >> "${GITHUB_ENV}"

      - name: Determine shm-size
        id: shm
        run: |
          shm_size="1g"
          case "${{ inputs.build-environment }}" in
            *cuda*)
              shm_size="2g"
              ;;
            *rocm*)
              shm_size="8g"
              ;;
          esac
          echo "::set-output name=shm-size::${shm_size}"

      - name: Download PyTorch Build Artifacts
        uses: seemethere/download-artifact-s3@0504774707cbc8603d7dca922e8026eb8bf3b47b
        with:
          name: ${{ inputs.build-environment }}

      - name: Unzip artifacts
        run: |
          unzip -o artifacts.zip

      - name: Output disk space left
        run: |
          sudo df -H

      - name: Parse ref
        id: parse-ref
        run: .github/scripts/parse_ref.py

      - name: Test
        env:
          BUILD_ENVIRONMENT: ${{ inputs.build-environment }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          BRANCH: ${{ steps.parse-ref.outputs.branch }}
          CUSTOM_TEST_ARTIFACT_BUILD_DIR: build/custom_test_artifacts
          SHA1: ${{ github.event.pull_request.head.sha || github.sha }}
          PYTORCH_RETRY_TEST_CASES: 1
          JOB_BASE_NAME: ${{ inputs.build-environment }}-test
          TEST_CONFIG: ${{ matrix.config }}
          SHARD_NUMBER: ${{ matrix.shard }}
          NUM_TEST_SHARDS: ${{ matrix.num_shards }}
          PR_BODY: ${{ github.event.pull_request.body }}
          SCCACHE_BUCKET: ossci-compiler-cache-circleci-v2
          XLA_CLANG_CACHE_S3_BUCKET_NAME: ossci-compiler-clang-cache-circleci-xla
        timeout-minutes: 240
        run: |
          set -x

          if [[ $TEST_CONFIG == 'multigpu' ]]; then
            TEST_COMMAND=.jenkins/pytorch/multigpu-test.sh
          elif [[ $BUILD_ENVIRONMENT == *onnx* ]]; then
            TEST_COMMAND=.jenkins/caffe2/test.sh
          else
            TEST_COMMAND=.jenkins/pytorch/test.sh
          fi

          # detached container should get cleaned up by teardown_ec2_linux
          # TODO: Stop building test binaries as part of the build phase
          # Used for GPU_FLAG since that doesn't play nice
          # shellcheck disable=SC2086,SC2090
          container_name=$(docker run \
            ${GPU_FLAG:-} \
            -e BUILD_ENVIRONMENT \
            -e PR_NUMBER \
            -e CUSTOM_TEST_ARTIFACT_BUILD_DIR \
            -e GITHUB_ACTIONS \
            -e IN_CI \
            -e IS_GHA \
            -e BRANCH \
            -e SHA1 \
            -e AWS_DEFAULT_REGION \
            -e IN_WHEEL_TEST \
            -e SHARD_NUMBER \
            -e JOB_BASE_NAME \
            -e TEST_CONFIG \
            -e NUM_TEST_SHARDS \
            -e PR_BODY \
            -e PYTORCH_RETRY_TEST_CASES \
            -e PR_LABELS \
            -e MAX_JOBS="$(nproc --ignore=2)" \
            -e SCCACHE_BUCKET \
            ${{ contains(inputs.build-environment, 'xla') && '-e XLA_CUDA=0' || '' }} \
            -e XLA_CLANG_CACHE_S3_BUCKET_NAME \
            --env-file="/tmp/github_env_${GITHUB_RUN_ID}" \
            --ulimit stack=10485760:83886080 \
            --security-opt seccomp=unconfined \
            --cap-add=SYS_PTRACE \
            --ipc=host \
            --shm-size=${{ steps.shm.outputs.shm-size }} \
            --tty \
            --detach \
            --name="${container_name}" \
            --user jenkins \
            -v "${GITHUB_WORKSPACE}:/var/lib/jenkins/workspace" \
            -w /var/lib/jenkins/workspace \
            ${{ inputs.docker-image }}
          )
          docker exec -t "${container_name}" sh -c "sudo chown -R jenkins . && pip install dist/*.whl && ${TEST_COMMAND}"

      - name: Chown workspace
        if: always()
        env:
          # TODO duplicated
          ALPINE_IMAGE: "308535385114.dkr.ecr.us-east-1.amazonaws.com/tool/alpine"
        run: |
          # Ensure the working directory gets chowned back to the current user
          docker run --rm -v "$(pwd)":/v -w /v "${ALPINE_IMAGE}" chown -R "$(id -u):$(id -g)" .

      # TODO add upload of test stats and stuff
      - name: Hold runner for 2 hours or until ssh sessions have drained
        # TODO working-directory: !{{ pytorch_directory }}
        # Always hold for active ssh sessions
        if: always()
        run: .github/scripts/wait_for_ssh_to_drain.sh

      - name: Kill containers, clean up images
        if: always()
        run: |
          # ignore expansion of "docker ps -q" since it could be empty
          # shellcheck disable=SC2046
          docker stop $(docker ps -q) || true
          # Prune all of the docker images
          docker system prune -af
