name: windows-build

on:
  workflow_call:
    inputs:
      build-environment:
        required: true
        type: string
      cuda-version:
        required: true
        type: string
      build-with-debug:
        required: false
        type: boolean
        default: false
    outputs:
      docker-image:
        value: ${{ jobs.build.outputs.docker-image }}

env:
  IN_CI: 1 # TODO delete in favor of GITHUB_ACTIONS
  IS_GHA: 1 # TODO delete in favor of GITHUB_ACTIONS

jobs:
  build:
    runs-on: [self-hosted, windows.4xlarge]
    timeout-minutes: 240
    env:
      JOB_BASE_NAME: ${{ inputs.build-environment }}-build
    steps:
      - name: Clean workspace
        shell: bash
        run: |
          echo "${GITHUB_WORKSPACE}"
          rm -rf "${GITHUB_WORKSPACE}"
          mkdir "${GITHUB_WORKSPACE}"

      - name: Checkout PyTorch
        uses: zhouzhuojie/checkout@05b13c9a0d21f08f6d5e64a1d5042246d13619d9
        with:
          ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}
          # deep clone, to allow use of git merge-base
          fetch-depth: 0
          submodules: recursive

      # TODO duplicated with setup-ec2-linux
      - name: Display EC2 information
        shell: bash
        run: .github/scripts/display_ec2_info.sh

      - name: "[FB EMPLOYEES] Enable SSH (Click me for login details)"
        uses: seemethere/add-github-ssh-key@v1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Needed for binary builds, see: https://github.com/pytorch/pytorch/issues/73339#issuecomment-1058981560
      - name: Enable long paths on Windows
        shell: powershell
        run: |
          Set-ItemProperty -Path "HKLM:\\SYSTEM\CurrentControlSet\Control\FileSystem" -Name "LongPathsEnabled" -Value 1

      - name: Install Visual Studio 2019 toolchain
        shell: powershell
        env:
          VS_VERSION: "16.8.6"
          INSTALL_WINDOWS_SDK: 1
        run: |
          .\.circleci\scripts\vs_install.ps1

      - name: Install CUDA and CUDNN
        shell: bash
        if: inputs.cuda-version != 'cpu'
        env:
          CUDA_VERSION: ${{ inputs.cuda-version }}
        run: |
          .circleci/scripts/windows_cuda_install.sh
          .circleci/scripts/windows_cudnn_install.sh

      - uses: actions/setup-python@v2
        name: Setup Python3
        with:
          python-version: "3.x"

      - name: Parse ref
        id: parse-ref
        run: .github/scripts/parse_ref.py

      - name: Build
        shell: bash
        env:
          PYTORCH_FINAL_PACKAGE_DIR: /c/${{ github.run_id }}/build-results/
          BRANCH: ${{ steps.parse-ref.outputs.branch }}
          BUILD_ENVIRONMENT: ${{ inputs.build-environment }}
          BUILD_WHEEL: 1
          MAX_JOBS: 8
          CUDA_VERSION: ${{ inputs.cuda-version }}
          PYTHON_VERSION: "3.8"
          PYTORCH_RETRY_TEST_CASES: 1
          PR_LABELS: ${{ toJson(github.event.pull_request.labels.*.name) }}
          SCCACHE_BUCKET: "ossci-compiler-cache"
          VC_PRODUCT: "BuildTools"
          VC_VERSION: ""
          VC_YEAR: "2019"
          ALPINE_IMAGE: "308535385114.dkr.ecr.us-east-1.amazonaws.com/tool/alpine"
          AWS_DEFAULT_REGION: us-east-1
          PR_NUMBER: ${{ github.event.pull_request.number }}
          SHA1: ${{ github.event.pull_request.head.sha || github.sha }}
          DEBUG: ${{ inputs.build-with-debug && '1' || '0' }}
          TORCH_CUDA_ARCH_LIST: "7.0"
          USE_CUDA: ${{ inputs.cuda-version != 'cpu' && '1' || '0' }}
        run: |
          .jenkins/pytorch/win-build.sh

      # Upload to github so that people can click and download artifacts
      - name: Upload artifacts to s3
        uses: seemethere/upload-artifact-s3@v3
        with:
          retention-days: 14
          if-no-files-found: error
          name: ${{ env.BUILD_ENVIRONMENT }}
          path: C:\${{ github.run_id }}\build-results

      - name: Wait until all sessions have drained
        shell: powershell
        if: always()
        timeout-minutes: 120
        run: |
          .github\scripts\wait_for_ssh_to_drain.ps1

      - name: Kill active ssh sessions if still around (Useful if workflow was cancelled)
        shell: powershell
        if: always()
        run: |
          .github\scripts\kill_active_ssh_sessions.ps1

      - name: Cleanup build-results and workspaces
        if: always()
        shell: bash
        env:
          PYTORCH_FINAL_PACKAGE_DIR: /c/${{ github.run_id }}/build-results/
        # Should remove the entirety of pytorch-${{ github.run_id }}
        run: |
          rm -rf "${PYTORCH_FINAL_PACKAGE_DIR}"
          rm -rf ./*
